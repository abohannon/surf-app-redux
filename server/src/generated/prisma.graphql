type AggregateBuoy {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Buoy {
  id: ID!
  date: String
  windDirection: String
  windSpeed: String
  waveHeight: String
  dominantWavePeriod: String
  averageWavePeriod: String
  meanWaveDirection: String
  airTemp: String
  waterTemp: String
  tide: String
}

type BuoyConnection {
  pageInfo: PageInfo!
  edges: [BuoyEdge]!
  aggregate: AggregateBuoy!
}

input BuoyCreateInput {
  id: ID
  date: String
  windDirection: String
  windSpeed: String
  waveHeight: String
  dominantWavePeriod: String
  averageWavePeriod: String
  meanWaveDirection: String
  airTemp: String
  waterTemp: String
  tide: String
}

type BuoyEdge {
  node: Buoy!
  cursor: String!
}

enum BuoyOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  windDirection_ASC
  windDirection_DESC
  windSpeed_ASC
  windSpeed_DESC
  waveHeight_ASC
  waveHeight_DESC
  dominantWavePeriod_ASC
  dominantWavePeriod_DESC
  averageWavePeriod_ASC
  averageWavePeriod_DESC
  meanWaveDirection_ASC
  meanWaveDirection_DESC
  airTemp_ASC
  airTemp_DESC
  waterTemp_ASC
  waterTemp_DESC
  tide_ASC
  tide_DESC
}

type BuoyPreviousValues {
  id: ID!
  date: String
  windDirection: String
  windSpeed: String
  waveHeight: String
  dominantWavePeriod: String
  averageWavePeriod: String
  meanWaveDirection: String
  airTemp: String
  waterTemp: String
  tide: String
}

type BuoySubscriptionPayload {
  mutation: MutationType!
  node: Buoy
  updatedFields: [String!]
  previousValues: BuoyPreviousValues
}

input BuoySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BuoyWhereInput
  AND: [BuoySubscriptionWhereInput!]
  OR: [BuoySubscriptionWhereInput!]
  NOT: [BuoySubscriptionWhereInput!]
}

input BuoyUpdateInput {
  date: String
  windDirection: String
  windSpeed: String
  waveHeight: String
  dominantWavePeriod: String
  averageWavePeriod: String
  meanWaveDirection: String
  airTemp: String
  waterTemp: String
  tide: String
}

input BuoyUpdateManyMutationInput {
  date: String
  windDirection: String
  windSpeed: String
  waveHeight: String
  dominantWavePeriod: String
  averageWavePeriod: String
  meanWaveDirection: String
  airTemp: String
  waterTemp: String
  tide: String
}

input BuoyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  windDirection: String
  windDirection_not: String
  windDirection_in: [String!]
  windDirection_not_in: [String!]
  windDirection_lt: String
  windDirection_lte: String
  windDirection_gt: String
  windDirection_gte: String
  windDirection_contains: String
  windDirection_not_contains: String
  windDirection_starts_with: String
  windDirection_not_starts_with: String
  windDirection_ends_with: String
  windDirection_not_ends_with: String
  windSpeed: String
  windSpeed_not: String
  windSpeed_in: [String!]
  windSpeed_not_in: [String!]
  windSpeed_lt: String
  windSpeed_lte: String
  windSpeed_gt: String
  windSpeed_gte: String
  windSpeed_contains: String
  windSpeed_not_contains: String
  windSpeed_starts_with: String
  windSpeed_not_starts_with: String
  windSpeed_ends_with: String
  windSpeed_not_ends_with: String
  waveHeight: String
  waveHeight_not: String
  waveHeight_in: [String!]
  waveHeight_not_in: [String!]
  waveHeight_lt: String
  waveHeight_lte: String
  waveHeight_gt: String
  waveHeight_gte: String
  waveHeight_contains: String
  waveHeight_not_contains: String
  waveHeight_starts_with: String
  waveHeight_not_starts_with: String
  waveHeight_ends_with: String
  waveHeight_not_ends_with: String
  dominantWavePeriod: String
  dominantWavePeriod_not: String
  dominantWavePeriod_in: [String!]
  dominantWavePeriod_not_in: [String!]
  dominantWavePeriod_lt: String
  dominantWavePeriod_lte: String
  dominantWavePeriod_gt: String
  dominantWavePeriod_gte: String
  dominantWavePeriod_contains: String
  dominantWavePeriod_not_contains: String
  dominantWavePeriod_starts_with: String
  dominantWavePeriod_not_starts_with: String
  dominantWavePeriod_ends_with: String
  dominantWavePeriod_not_ends_with: String
  averageWavePeriod: String
  averageWavePeriod_not: String
  averageWavePeriod_in: [String!]
  averageWavePeriod_not_in: [String!]
  averageWavePeriod_lt: String
  averageWavePeriod_lte: String
  averageWavePeriod_gt: String
  averageWavePeriod_gte: String
  averageWavePeriod_contains: String
  averageWavePeriod_not_contains: String
  averageWavePeriod_starts_with: String
  averageWavePeriod_not_starts_with: String
  averageWavePeriod_ends_with: String
  averageWavePeriod_not_ends_with: String
  meanWaveDirection: String
  meanWaveDirection_not: String
  meanWaveDirection_in: [String!]
  meanWaveDirection_not_in: [String!]
  meanWaveDirection_lt: String
  meanWaveDirection_lte: String
  meanWaveDirection_gt: String
  meanWaveDirection_gte: String
  meanWaveDirection_contains: String
  meanWaveDirection_not_contains: String
  meanWaveDirection_starts_with: String
  meanWaveDirection_not_starts_with: String
  meanWaveDirection_ends_with: String
  meanWaveDirection_not_ends_with: String
  airTemp: String
  airTemp_not: String
  airTemp_in: [String!]
  airTemp_not_in: [String!]
  airTemp_lt: String
  airTemp_lte: String
  airTemp_gt: String
  airTemp_gte: String
  airTemp_contains: String
  airTemp_not_contains: String
  airTemp_starts_with: String
  airTemp_not_starts_with: String
  airTemp_ends_with: String
  airTemp_not_ends_with: String
  waterTemp: String
  waterTemp_not: String
  waterTemp_in: [String!]
  waterTemp_not_in: [String!]
  waterTemp_lt: String
  waterTemp_lte: String
  waterTemp_gt: String
  waterTemp_gte: String
  waterTemp_contains: String
  waterTemp_not_contains: String
  waterTemp_starts_with: String
  waterTemp_not_starts_with: String
  waterTemp_ends_with: String
  waterTemp_not_ends_with: String
  tide: String
  tide_not: String
  tide_in: [String!]
  tide_not_in: [String!]
  tide_lt: String
  tide_lte: String
  tide_gt: String
  tide_gte: String
  tide_contains: String
  tide_not_contains: String
  tide_starts_with: String
  tide_not_starts_with: String
  tide_ends_with: String
  tide_not_ends_with: String
  AND: [BuoyWhereInput!]
  OR: [BuoyWhereInput!]
  NOT: [BuoyWhereInput!]
}

input BuoyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBuoy(data: BuoyCreateInput!): Buoy!
  updateBuoy(data: BuoyUpdateInput!, where: BuoyWhereUniqueInput!): Buoy
  updateManyBuoys(data: BuoyUpdateManyMutationInput!, where: BuoyWhereInput): BatchPayload!
  upsertBuoy(where: BuoyWhereUniqueInput!, create: BuoyCreateInput!, update: BuoyUpdateInput!): Buoy!
  deleteBuoy(where: BuoyWhereUniqueInput!): Buoy
  deleteManyBuoys(where: BuoyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  buoy(where: BuoyWhereUniqueInput!): Buoy
  buoys(where: BuoyWhereInput, orderBy: BuoyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Buoy]!
  buoysConnection(where: BuoyWhereInput, orderBy: BuoyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BuoyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  buoy(where: BuoySubscriptionWhereInput): BuoySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
